from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text, IDFilter
from aiogram.dispatcher import FSMContext
# from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.types import CallbackQuery
from aiogram import types
from requests import get
from main import dp, bot
from Keyboards import *
from database import cur, con
from filters import *

# scheduler = AsyncIOScheduler()
# scheduler.add_job(get_weather,x  'cron', day_of_week='mon-sun', hour=09, minute=00, end_date='2025-10-13')
# –ò –∑–∞—Ç–µ–º scheduler.start(), —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ø—É–ª–ª–∏–Ω–≥–∞.
# –†–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ. –ï—Å–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∫ –±–¥, —Ç–æ –∑–∞–¥–∞—á–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å ¬´–Ω–∞ –≥–æ—Ä—è—á—É—é¬ª.


class _State(StatesGroup):
    city = State()


class StateAlerts(StatesGroup):
    subscribe = State()


@dp.message_handler(commands=['start'])  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def send_welcome(message: types.Message):  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start
    await set_default_commands()
    cur.execute("SELECT id FROM base")
    if message.from_user.id not in [i[0] for i in cur.fetchall()]:
        cur.execute("INSERT INTO base VALUES (?,?,?,?)",
                    (message.from_user.username, message.from_user.id, None, 1))
        con.commit()
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, ***{message.from_user.first_name}*** \U0001F609 !\n'
            f'–Ø Telegram-–±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ –ª—é–±–æ–º —Ä–µ–≥–∏–æ–Ω–µ. '
            f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é, –Ω–∞–∂–º–∏—Ç–µ "help".'
            f'\n–ò–ª–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.\n',
            parse_mode='Markdown',
            reply_markup=mark())
        await bot.send_message(message.chat.id,
                               f'–í–∏–∂—É —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ, '
                               f'–Ω–∞–ø–∏—à–∏—Ç–µ "/manage" –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω'
                               f' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.'
                               f'\n–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–π —Ä–µ–≥–∏–æ–Ω, '
                               f'–∞ —è –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–≥–æ–¥—É –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ \U000026C5',
                               parse_mode='')
    else:
        await bot.send_message(
            message.chat.id,
            f'–ü—Ä–∏–≤–µ—Ç, ***{message.from_user.first_name}*** \U0001F609!\n'
            f'–Ø —Ç–µ–±—è –ø–æ–º–Ω—é!\n'
            f'–ù–∞–∂–º–∏ "help" –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.\n'
            f'–ù–∞–ø–∏—à–∏ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã \U000026C5',
            reply_markup=mark(),
            parse_mode='Markdown')
        await message.answer('–ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ "–ü–æ–≥–æ–¥–∞"',
                             reply_markup=get_weather_button())


@dp.callback_query_handler(text='help')
@dp.message_handler(commands=['help', '–ø–æ–º–æ—â—å'])  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
async def send_help(message):
    text = f'–Ø –ø–æ–Ω–∏–º–∞—é —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n'\
           f'/start\n/help\n/developer\n/manage\n'\
           f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω.\n'\
           f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–∞–∂–º–∏ "–ø–æ–≥–æ–¥–∞"'
    if type(message) is types.CallbackQuery:
        await message.answer()
        await bot.send_message(
            message.message.chat.id,
            text=text,
            parse_mode='',
            reply_markup=get_weather_button())  # –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    elif type(message) is types.Message:
        await bot.send_message(
            message.chat.id,
            text=text,
            parse_mode='',
            reply_markup=get_weather_button())


@dp.message_handler(commands=['manage'])  # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /manage
async def manage_menu(message: types.Message):
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=set_city_menu())


@dp.message_handler(commands=['developer'])  # –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã /developer
async def send_developer(message: types.Message):
    await bot.send_message(message.chat.id, text='<strong>@w1thoutiq</strong>',
                           reply_markup=admin(), parse_mode='HTML')


# –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
@dp.message_handler(IDFilter(790528433), commands=['message'])
async def send_message(message: types.Message):
    cur.execute("SELECT id FROM base")
    for user_id in cur.fetchall():
        user_id = user_id[0]
        try:
            await get_weather_for_cities(message)
            cur.execute("SELECT active FROM base WHERE id =?", (user_id,))
            if int(cur.fetchone()[0]) == 0:
                cur.execute(f"UPDATE base SET active = {1} WHERE id =?", (user_id,))
                con.commit()
            cur.execute("UPDATE base SET active = 0 WHERE id =?", (user_id,))
        except:
            con.commit()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


@dp.message_handler(Text(equals='–ü–æ–≥–æ–¥–∞', ignore_case=True))
async def weather(message: types.Message):  # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    cur.execute(f"SELECT city FROM base WHERE id={message.from_user.id}")
    cities = cur.fetchone()[0].split(', ')
    await message.answer(text='–î–ª—è –∫–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É?',
                         reply_markup=weather_btn(cities))


@dp.callback_query_handler(Text(startswith='alerts_'))
async def call_alerts(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['call'] = call
    await call.answer()
    action = call.data.split('alerts_')[1]
    if action == 'unsubscribe':
        cur.execute(f'DELETE FROM alerts_base WHERE id={call.from_user.id}')
        con.commit()
        await call.message.edit_text(text='–£–¥–∞–ª–∏–ª –≤–∞—Å –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=set_city_menu())
    elif action == 'subscribe':
        await first_step_for_alert(call)
    elif action == 'cancel':
        await call.message.edit_text(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=set_city_menu())


@dp.message_handler(content_types='text', state=StateAlerts.subscribe)
async def second_step_alert(message: types.Message, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer(f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=set_city_menu())
    else:
        city = message.text.capitalize()
        try:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if await get_weather(city) is None:
                raise ValueError
            cur.execute(f"REPLACE INTO alerts_base(id, username, city) VALUES ("
                        f"'{message.from_user.id}',"
                        f"'{message.from_user.username}',"
                        f"'{city}')")
            con.commit()
            async with state.proxy() as data:
                call = data['call']
            await bot.edit_message_text(
                message_id=call.message.message_id,
                chat_id=call.message.chat.id,
                text='–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üéâ',
                reply_markup=set_city_menu())
            await state.finish()
        except ValueError:
            await message.reply(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! \U0001F915'
                                f'\n–ù–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞", –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏',
                                reply_markup=cancel())
        finally:
            await message.delete()


@dp.message_handler(content_types='text', state=_State.city)
async def set_city(message: types.Message, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer(f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=set_city_menu())
    else:
        city = message.text.capitalize()
        try:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if await get_weather(city) is None:
                raise ValueError
            async with state.proxy() as data:
                data['city'] = city
            await message.answer(text=f'–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ä–µ–≥–∏–æ–Ω–æ–º?', reply_markup=add_city_menu())
        except ValueError:
            await message.reply(f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! \U0001F915'
                                f'\n–ù–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞", –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏', reply_markup=cancel())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ä–æ–¥, —Ç–æ–≥–¥–∞ –≤–µ—Ä–Ω–µ—Ç –ø–æ–≥–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(content_types=['text'])
async def unknown_message_text(message: types.Message):
    try:
        city = message["text"].capitalize()
        await bot.send_message(
            message.chat.id,
            text=await get_weather(city),
            parse_mode='HTML'
        )
    except:
        await message.reply(f'\U0001F915 –°—Ç—Ä–∞–Ω–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ!')


# @dp.message_handler(CorrectTime(), content_types='any')
# async def correct_time_msg(message):
#     await get_weather_for_cities(message)


@dp.message_handler(content_types='any')  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ-–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –æ—à–∏–±–æ–∫
async def unknown_message(message: types.Message):
    await message.reply(f'–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å, –Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—é,\n'
                        f'—á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help',
                        parse_mode='Markdown', reply_markup=mark())


# callbacks


@dp.callback_query_handler(Text(startswith='weather_'))
async def weather_with_button(call: CallbackQuery):
    await call.answer()
    city = call.data.split('weather_')[1]
    await get_weather(city)
    if city == 'cancel':
        await bot.delete_message(message_id=call.message.message_id,
                                 chat_id=call.from_user.id)
    elif city == 'all':
        await get_weather_for_cities(call)
    else:
        await bot.send_message(chat_id=call.message.chat.id,
                               text=await get_weather(city),
                               parse_mode='HTML')


@dp.callback_query_handler(Text(startswith='city_'))
async def city_kb(call: CallbackQuery):
    await call.answer()
    city = call.data.split('city_')[1]
    if city == 'cancel':
        await bot.delete_message(message_id=call.message.message_id,
                                 chat_id=call.from_user.id)
    else:
        cur.execute(f"SELECT city FROM base WHERE id={call.from_user.id}")
        cities = cur.fetchone()[0].replace(city + ', ', '')
        cur.execute(f"REPLACE INTO base (username, id, city, active) VALUES (?,?,?,?)",
                    (call.from_user.username, call.from_user.id, cities, 1,))
        con.commit()
        cities = cities.split(', ')
        await bot.edit_message_text(message_id=call.message.message_id,
                                    chat_id=call.from_user.id,
                                    text=f'–í—ã —É–¥–∞–ª–∏–ª–∏ —Ä–µ–≥–∏–æ–Ω {city}\n'
                                         f'–ö–∞–∫–æ–π –µ—â–µ —Ä–µ–≥–∏–æ–Ω —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?',
                                    reply_markup=get_button_with_city(cities))


@dp.callback_query_handler(Text(startswith='menu_'))
async def call_city(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['message_id'] = call.message.message_id
    await call.answer()
    action = call.data.split('menu_')[1]
    if action == 'change':
        cur.execute(f"SELECT city FROM base WHERE id={call.from_user.id}")
        city = cur.fetchone()[0][:-2].split(', ')
        await bot.send_message(chat_id=call.from_user.id,
                               text=f'–í–∞—à–∏ —Ä–µ–≥–∏–æ–Ω—ã:',
                               reply_markup=get_button_with_city(city))
    elif action == 'add':
        await first_set_city(call)
    elif action == 'my_city':
        await my_city(call)
    elif action == 'alerts':
        await call.message.edit_text(text="–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏",
                                     reply_markup=menu_of_alerts())


@dp.callback_query_handler(Text(startswith='kb_'), state=_State.city)
async def kb_set(call, state: FSMContext):
    await call.answer()
    action = call.data.split('kb_')[1]
    async with state.proxy() as data:
        city = data['city']
    if action == 'add':
        cur.execute(f"SELECT city FROM base WHERE id={call.from_user.id}")
        cities = cur.fetchone()[0]
        if (city + ', ') in cities:
            await bot.edit_message_text(chat_id=call.from_user.id,
                                        message_id=call.message.message_id,
                                        text=f'–≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ')
        else:
            cur.execute(f"SELECT city FROM base WHERE id={call.from_user.id}")
            cities = cur.fetchone()[0] + city + ', '
            cur.execute(f"REPLACE INTO base (username, id, city, active) VALUES (?,?,?,?)",
                        (call.from_user.username, call.from_user.id, cities, 1,))
            await bot.edit_message_text(chat_id=call.from_user.id,
                                        message_id=call.message.message_id,
                                        text=f'–ì–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω')
        con.commit()
    elif action == 'set':
        cur.execute(f"REPLACE INTO base (username, id, city, active) VALUES (?,?,?,?)", (
            call.from_user.username, call.from_user.id, city+', ', 1,))
        con.commit()
        await bot.edit_message_text(chat_id=call.from_user.id,
                                    message_id=call.message.message_id,
                                    text=f'–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–í–∞—à —Ä–µ–≥–∏–æ–Ω: {city}\n')
    await state.finish()


# @dp.callback_query_handler(Text(startswith='alerts_'))
# async def call_alerts(call: CallbackQuery, state: FSMContext):
#     await call.answer()
#     action = call.data.split('alerts_')[1]
#     if action == 'unsubscribe':
#         cur.execute(f'DELETE FROM alerts_base WHERE id={call.from_user.id}')
#         con.commit()
#         await call.message.edit_text(text='–£–¥–∞–ª–∏–ª –≤–∞—Å –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=set_city_menu())
#     elif action == 'subscribe':
#         async with state.proxy() as data:
#             data['message_id'] = call.message.message_id
#             data['chat_id'] = call.message.chat.id
#         await first_step_for_alert(call)
#     elif action == 'cancel':
#         await call.message.edit_text(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=set_city_menu())


# functions


async def my_city(message):  # –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    cur.execute(f"SELECT city FROM base WHERE id={message.from_user.id}")
    city = cur.fetchone()[0].split(', ')
    if city == 'None' or len(city) == 0:
        await bot.send_message(message.message.chat.id,
                               f'–†–µ–≥–∏–æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
    else:
        await bot.send_message(
            chat_id=message.message.chat.id,
            text=f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã:',
            reply_markup=weather_btn(city))


async def first_set_city(message):
    await bot.send_message(
        chat_id=message.message.chat.id,
        text=f'–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç')
    await _State.city.set()


async def get_weather_for_cities(call):
    cur.execute(f'SELECT city FROM base WHERE id={call.from_user.id}')
    cities = cur.fetchone()[0].split(', ')[:-1:]
    if type(call) is types.CallbackQuery:
        for city in cities:
            await bot.send_message(chat_id=call.message.chat.id,
                                   text=await get_weather(city), parse_mode='HTML',
                                   reply_markup=get_weather_button())
    elif type(call) is types.Message:
        message = call
        if type(call) is types.CallbackQuery:
            for city in cities:
                await bot.send_message(chat_id=message.chat.id,
                                       text=await get_weather(city), parse_mode='HTML',
                                       reply_markup=get_weather_button())
    return


async def get_weather(city):
    try:
        url = 'https://api.openweathermap.org/data/2.5/weather'
        api_of_weather = '352c751a80237a51813f0ae93d864822'
        params = {'APPID': api_of_weather,
                  'q': city,
                  'units': 'metric',
                  'lang': 'ru'}
        result = get(url, params=params).json()
        info = result['main']['temp'], result['main']['feels_like'], result['weather'][0]['description'], result['name']
        message_text = f'–ü–æ–≥–æ–¥–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ <strong>{info[3]}</strong>:\n' \
                       f'<em><strong>{info[0]} ¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {info[1]}¬∞C, {info[2]}</strong></em>'
        return message_text
    except KeyError:
        return


async def first_step_for_alert(call):
    await call.message.edit_text(text=f'–û—Ç–ø—Ä–∞–≤—å —Ä–µ–≥–∏–æ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    await StateAlerts.subscribe.set()


# scheduler.add_job(get_weather_for_cities, 790528433, day_of_week='mon-sun', hour=23, minute=15, end_date='2025-10-13')


async def set_default_commands() -> bot.set_my_commands:
    return await bot.set_my_commands(
        commands=[
            types.BotCommand('start', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'),
            types.BotCommand('manage', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'),
            types.BotCommand('help', '–í—Å–µ —Ç–æ, —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç'),
            types.BotCommand('developer', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'),
        ],
        scope=types.BotCommandScopeDefault(), )


async def alerts_message():
    try:
        cur.execute(f"SELECT id FROM alerts_base")
        users = [user[0] for user in cur.fetchall()]
        for user in users:
            cur.execute(f'SELECT city FROM alerts_base WHERE id={user}')
            city = cur.fetchone()[0]
            await bot.send_message(
                chat_id=user,
                text=f'–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n'
                     f'{await get_weather(city)}',
                parse_mode='HTML'
            )
        await bot.send_message(
            chat_id=790528433,
            text="–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            parse_mode='HTML'
        )
    except:
        pass


from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime as dt, timedelta


scheduler = AsyncIOScheduler(timezone='Europe/Moscow')

scheduler.add_job(alerts_message, trigger='date', run_date=dt.now()+timedelta(seconds=1))

scheduler.add_job(alerts_message, trigger='cron', hour='07', minute='00', start_date=dt.now())

scheduler.add_job(alerts_message, trigger='cron', hour='13', minute='00', start_date=dt.now())

scheduler.add_job(alerts_message, trigger='cron', hour='17', minute='00', start_date=dt.now())
